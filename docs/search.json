[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "The Tandy Center for Ocean Forecasting is a computational oceanographic team at Bigelow Laboratory. We work with partners to develop and deploy real-time ocean forecasting tools for industry, conservation, resource management, communities, and education. Our aim is for people to have access to tools and resources they need to use and deploy forecasts.\nWe work both on developing new forecasting technologies and algorithms, and on putting forecasts in the hands of people to solve practical problems. The forecasts use cutting edge machine learning algorithms and draw on data ranging from satellites to measurements on the water.\nWe envision a world where ocean forecasts provide accessible and equitable tools for prospering in a changing ocean environment.\nPlease feel free to contact us."
  },
  {
    "objectID": "posts/2024-09-27_cefi_intro/index.html",
    "href": "posts/2024-09-27_cefi_intro/index.html",
    "title": "Intro to cefi",
    "section": "",
    "text": "Recently we started investigating the relatively new CEFI data portal which looks to be a promising source of modeled environmental covariates suitable for ecological forecasting. The services and datasets are not fully implemented yet, but we are looking ahead to when we might be able to roll these into our workflows. To that end we have created the cefi R package.\nCEFI data is served via a THREDDS and provides dynamic data access using OPeNDAP. We have always leveraged the ncdf4 R package, but this time we decided to try our hand at Michael Sumner’s tidync R package. CEFI data elements are arrayed outputs from model runs (historical and forecast); to cast these as geospatial raster data we access a second “static” data element (also OPeNDAP). We hide all of these details from the user so that obtaining data in a familiar form is quick and easy.\nBelow we show a single forecasted data product for the temperature of the sea floor in the Northwest Atlantic region in mid-90s. Here we show the temperature of the bottom (C) for one month. We are still learning the finer details of how to work with this data, but it looks promising. We do wish it followed the coastline more closely (the bane of the near-shore scientist!)\n\n\n\nMap showing bottom temps\n\n\nThen we extract the values for the complete forecast (12 months) at the location shown above using the blue circle. Then we plot the forecasted temperatures at that location.\n\n\n\nPlot showing timeseries"
  },
  {
    "objectID": "posts/2024-09-30_factor_foo/index.html",
    "href": "posts/2024-09-30_factor_foo/index.html",
    "title": "Intro to cefi",
    "section": "",
    "text": "Have you ever been frustrated by factors in R. factors are vectors where elements have been grouped into categories which are called “levels”. Recently we had a discussion about what makes factors sometimes seem opaque. One thing we agreed is that the nomenclature: “factors” and “levels” aren’t as intuitive as other names might be such as “categoricals” and “groups” (or “categories”). Fortunately, as rose by any other name smells as sweet.\nMany operations in data science manipulations depend upon factored (categorical! grouped!) data. In R this is very obvious when splitting data sets, plotting when color by group and when performing by-group statistics.\nThe forcatsR package from the tidyverse does a masterful job of helping users navigate with factors. But there’s no harm in looking to the base R utilities to gain a better handle of factors."
  },
  {
    "objectID": "posts/2024-09-30_factor_foo/index.html#factoring-characater-vectors",
    "href": "posts/2024-09-30_factor_foo/index.html#factoring-characater-vectors",
    "title": "Intro to cefi",
    "section": "Factoring characater vectors",
    "text": "Factoring characater vectors\nHere we have a vector of strings (characters!) This the most obvious case - it just makes sense right out of the box. We can ask R to group these which it does readily in alphabetical order.\n\nx = c(\"dog\", \"dog\", \"cat\", \"cat\", \"cat\", \"dog\", \"bird\", \"dog\", \"bird\")\nfx = factor(x)\nfx\n\n[1] dog  dog  cat  cat  cat  dog  bird dog  bird\nLevels: bird cat dog\n\n\nYou can get a vector of the levels.\n\nlevels(fx)\n\n[1] \"bird\" \"cat\"  \"dog\" \n\n\nYou can count the number of levels in the factor.\n\nnlevels(fx)\n\n[1] 3\n\n\n\nGet the level per element\nNow this gets a little trickier. Suppose you wanted to know what level (group? category?) each element belongs to. R can tell you which index into the levels vector.\n\nas.numeric(fx)\n\n[1] 3 3 2 2 2 3 1 3 1\n\n\nWhoa! Say what?\nWell, R is telling us that the first two elements in fx belong to the level 3 group - which is “dog”. The next three elements belong to the “cat” level which is the second level. Did you catch that?\n\n\nSpecify you own order\nWhat if you want the order to be dogs, cats and then birds? Just specify those as the levels argument.\n\nfx = factor(x, levels = c(\"dog\", \"cat\", \"bird\"))\nfx\n\n[1] dog  dog  cat  cat  cat  dog  bird dog  bird\nLevels: dog cat bird"
  },
  {
    "objectID": "posts/2024-09-30_factor_foo/index.html#factoring-characater-integer-vectors",
    "href": "posts/2024-09-30_factor_foo/index.html#factoring-characater-integer-vectors",
    "title": "Intro to cefi",
    "section": "Factoring characater integer vectors",
    "text": "Factoring characater integer vectors\nEqually intuitive is the idea behind factoring integer vectors.\n\nx = c(3L, 0L, 0L, 3L, 9L, 9L, 0L)\nfx = factor(x)\nfx\n\n[1] 3 0 0 3 9 9 0\nLevels: 0 3 9\n\n\nHere you can see that the levels (groups) are 0, 3 and 9. But if we ask for the levels you’ll see that internally R is helding them as charcaters (strings)!\n\nlevels(fx)\n\n[1] \"0\" \"3\" \"9\"\n\n\nThat’s just the way R handles it - it maintains the groupings (levels) as characters which are the most intuitive categorical data types.\nSo what happens when you ask for the fatcors as.numeric()?\n\nas.numeric(fx)\n\n[1] 2 1 1 2 3 3 1\n\n\nOh, it’s the indices again, just like with the anuimal example above."
  },
  {
    "objectID": "posts/2024-09-30_factor_foo/index.html#factoring-characater-real-number-vectors",
    "href": "posts/2024-09-30_factor_foo/index.html#factoring-characater-real-number-vectors",
    "title": "Intro to cefi",
    "section": "Factoring characater real-number vectors",
    "text": "Factoring characater real-number vectors\nSo, you should be pausing here and thinking about how R will make character grouping levels if we feed is real-numbers (not whole integers). We’ll provide 6 real numbers and then see what it does…\n\nx = c(3.14, 2.19, 3.2, 2.0001, 0.0001, 0)\nfx = factor(x)\nfx\n\n[1] 3.14   2.19   3.2    2.0001 1e-04  0     \nLevels: 0 1e-04 2.0001 2.19 3.14 3.2\n\n\nOh, it makes one grouping level for each input value. Well, that sort of makes sense, but also brings one the realization that factoring real numbers doesn’t have much value?\nWhat you can do to group real number is use cut().\n\nUse cut() on real numbers\n\nfx = cut(x, c(0,1,2,3,4), include.lowest = TRUE)\nfx\n\n[1] (3,4] (2,3] (3,4] (2,3] [0,1] [0,1]\nLevels: [0,1] (1,2] (2,3] (3,4]\n\n\nWell, this makes a bit of sense since we are cutting into groups 0-1, 1-2, 2-3, and 3-4.\nThe square bracket mean “inclusive” [ while the ( means “exclusive” boundaries.\nSo, let’s see the what we can know about the levels.\n\nnlevels(fx)\n\n[1] 4\n\nlevels(fx)\n\n[1] \"[0,1]\" \"(1,2]\" \"(2,3]\" \"(3,4]\"\n\n\nOnce again, the levels (groupings) are returned to us as strings. We could specify our own.\n\nfx = cut(x, c(0,1,2,3,4), include.lowest = TRUE, labels = c(\"almost none\", \"low\", \"medium\", \"high\"))\nfx\n\n[1] high        medium      high        medium      almost none almost none\nLevels: almost none low medium high\n\n\nThis is different than what we have seen before - in thas case the actual values have been changed to the grouping label we provided. This provides a mechanism for you to transform real numeric data to labels quickly.\nAnd can we get back to the numeric index mapping?\n\nas.numeric(fx)\n\n[1] 4 3 4 3 1 1\n\n\nYup!\n\n\nSummary\nfactor() provides a means for grouping elements in a vector - they work most intuitively with character and integer vectors. Use cut() to do similar groupings using real numbers."
  },
  {
    "objectID": "posts/2024-09-25_usdot_roads/index.html",
    "href": "posts/2024-09-25_usdot_roads/index.html",
    "title": "Roads and Vehicles",
    "section": "",
    "text": "This is the first post for the newly revived Tandy Center for Ocean Forecasting blog. Oddly enough it’s not about oceans or forecasting, but instead it is about a common summertime topic of conversation: traffic! Yes, Maine is a much beloved vacation destination in the summer. It’s beautiful here year round, but summer provides a special draw and with it transportation needs of all those visitors. Recently we were discussing the challenges of summer traffic and one of us wondered aloud (tongue-in-cheek) if each tourist brought two cars. We then wondered if there was any data to support our conjecture that there are many more cars around than when we were kids.\nAnd sure enough, the US Department of Transportation’s data portal, provides data on vehicle registrations (going back to 1900!) and public roads (going back to 1995). That was enough information for us to dive in!\nHere is a plot showing the number vehicle registrations (cars, truck, buses and morotcycles) by state since 1900. Maine is highlighted in orange, and the populous states (Calif, NY, texas, …) not unexpectedly have a lot of registered vehicles. Clearly the number of vehicles takes off after World War II. It’s not possible for us to explain why the number of vehicles in any state might have wild jumps - but we assume that the overall trends reflect the reality pretty well.\n Next we look at the miles of public roads by state, but do note that the date range is now clipped to start in 1995 (when DOT’s dataset begins). Once again, Maine is highlighted in orange and the big states have a lot of public roadways. It’s remarkable how relatively stable the length of public roadways has remained over the last 30 years.\n Finally, we show the ratio of vehicles per mile of public roadway.\n\n\n\ndensity\n\n\nOver the last 30 years the number of registered vehicles per mile of public road seems quite stable. If anything, the ratio has decreased in Maine over the last 5 years or so. Huh.\nWell, of course, the DOT doesn’t tell us anything about the number of visitors in the summer. But is an interesting insight, and quite frankly, for us curmudgeonly locals it comes as a surprise.\nThere is one related bit of insight provided by the Maine Turnpike Authority,that gives us old-timers hope that we are right about the increasing number of cars on the road. The number of cars using the Maine Turnpike has been generally increasing over the years.\n\n\n\nmta-traffic"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data science blog",
    "section": "",
    "text": "Welcome to the Tandy Center for Ocean Forecasting data science blog!\n\n\n\n\n\n\n\n\n\n\n\n\nIntro to cefi\n\n\n\nR-code\n\n\nanalysis\n\n\n\nIntroduction to the cefi package\n\n\n\nBen Tupper\n\n\nSep 27, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIntro to cefi\n\n\n\ndata\n\n\npackages\n\n\n\nIntroduction to the cefi package\n\n\n\nBen Tupper\n\n\nSep 27, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nRoads and Vehicles\n\n\n\nnews\n\n\nanalysis\n\n\n\nThe recent history of roads and vehicles\n\n\n\nBen Tupper\n\n\nSep 25, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  }
]